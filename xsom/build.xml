<?xml version="1.0"?>
<project name="XSOM" basedir="." default="jar">
	
	
	<!-- check if RelaxNGCC needs to be run -->
	<target name="ngcc-check">
		<uptodate property="ngcc.notrequired" targetfile="src/com/sun/xml/xsom/impl/parser/state/Schema.java">
			<srcfiles dir="src" includes="*.rng"/>
			<srcfiles dir="lib" includes="relaxngcc.jar"/>
		</uptodate>
	</target>
	
	<!-- run RELAXNGCC -->
	<target name="ngcc" unless="ngcc.notrequired" depends="ngcc-check">
		<mkdir dir="build/automata"/>
		
		<!-- delete old files to avoid corruption -->
		<delete dir="build/src" />
		<mkdir dir="build/src/com/sun/xml/xsom/impl/parser/state" />
		
		<java jar="lib/relaxngcc.jar" fork="true">
			
			<!-- enable debug statements -->
			<!--arg value="-d" /-->
			<!--arg value="- -print-first-follow"/-->
			
			<!-- dump automata -->
			<!--arg value="- -print-automata"/>
			<arg path="build/automata"/-->
			
			<!-- specify output directory -->
			<arg value="--target"/>
			<arg path="build/src/com/sun/xml/xsom/impl/parser/state" />
			
			<!-- source file -->
			<arg path="src/xmlschema.rng"/>
		</java>
	</target>
	
	<!-- compile Java source files -->
	<target name="compile" depends="ngcc"
		description="compiles all the source code into build/classes">
		<mkdir dir="build/classes"/>
		<javac
			srcdir="src; build/src"
			destdir="build/classes"
			debug="on"
			optimize="on"
			classpath="lib">
			
			<classpath>
				<fileset dir="lib" includes="*.jar"/>
			</classpath>
		</javac>
	</target>
	
	
	<!-- generate javadoc documentation from the working copy -->
	<target name="javadoc" depends="compile"
		description="generate javadoc">
		<mkdir dir="build/javadoc"/>
		<javadoc	locale="en_US"
					sourcepath="src"
					destdir="build/javadoc"
					windowtitle="XML Schema Object Model (XSOM)"
					public="yes"
					author="yes"
					>
				
			<package name="com.sun.xml.xsom"/>
			<package name="com.sun.xml.xsom.parser"/>
			<package name="com.sun.xml.xsom.visitor"/>
			<classpath>
				<fileset dir="lib" includes="*.jar"/>
			</classpath>
			<link href="http://java.sun.com/xml/jaxp/dist/1.1/docs/api/"
				offline="true" packagelistLoc="devdoc/XML-package"/>
			<link href="http://java.sun.com/products/jdk/1.2/docs/api/"
				offline="true" packagelistLoc="devdoc/coreAPI-package"/>

		</javadoc>
	</target>
	
	
	
	<!-- run clean to avoid files from test code to be included into the jar file -->
	<target name="jar" depends="clean,compile"
		description="build xsom.jar">
		<tstamp/>
		<mkdir dir="build" />
		
		<jar jarfile="build/xsom.jar" compress="true">
			<manifest>
				<attribute name="Version" value="${DSTAMP}"/>
				<attribute name="Build-Id" value="${build.id}"/>
			</manifest>
			<fileset dir="src" includes="**/*.properties"/>
			<fileset dir="src" includes="**/datatypes.xsd"/>
			<fileset dir="build/classes" includes="**/*.class" />
		</jar>
	</target>
	
	<target name="jar14" depends="clean,compile"
		description="build xsom14.jar">
		
		<mkdir dir="build/classes14"/>
		<copy todir="build/classes14">
			<fileset dir="build/classes"/>
		</copy>
		
		<java classname="com.rc.retroweaver.Weaver">
			<arg value="-source"/>
			<arg path="build/classes14"/>
			<classpath>
				<fileset dir="lib/retroweaver">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</java>

    <mkdir dir="build/retroweaver"/>
    <unjar src="lib/retroweaver/retroweaver.jar" dest="build/retroweaver"/>

		<jar jarfile="build/xsom14.jar" compress="true">
			<manifest>
				<attribute name="Version" value="${DSTAMP}"/>
				<attribute name="Build-Id" value="${build.id}"/>
			</manifest>
      <metainf dir="doc" includes="retroweaver-license.html" />
			<fileset dir="src" includes="**/*.properties"/>
			<fileset dir="src" includes="**/datatypes.xsd"/>
      <!-- bundle the retroweaver runtime -->
      <fileset dir="build/retroweaver" includes="**/runtime/*.class"/>
			<fileset dir="build/classes14" includes="**/*.class" />
		</jar>
	</target>
	
	
	
	<!-- create a distribution package -->
	<target name="release" depends="jar,jar14,javadoc,src-installer"
		description="prepare the release binary bundle and the release source code bundle">
		<tstamp />
		<property name="stage" value="xsom-${DSTAMP}"/>
		
		<!-- creates distribution package -->
		<mkdir dir="package" />
		<zip	zipfile="build/${stage}.zip">
			<zipfileset dir="." includes="build/xsom.jar" fullpath="${stage}/xsom.jar" />
			<zipfileset dir="." includes="build/xsom14.jar" fullpath="${stage}/xsom14.jar" />
			<zipfileset dir="build/javadoc" includes="**/*.*" prefix="${stage}/javadoc" />
			<zipfileset dir="doc" includes="**/*.*" prefix="${stage}" />
			<zipfileset dir="examples" includes="**/*" prefix="${stage}/examples" />
			<zipfileset dir="." includes="lib/relaxngDatatype.jar,lib/copying-relaxngDatatype.txt" prefix="${stage}" />
		</zip>
	</target>
	
	
	
	<target name="src-zip" depends="ngcc">
		<tstamp />
		<mkdir dir="build" />
		<zip zipfile="build/xsom-src.zip" compress="true">
			<zipfileset dir="." defaultexcludes="no">
				<include name="src/**/*" />
				<include name="build/src/**/*" />
				<include name="build.xml" />
				<include name="CVS/*" />
				<include name="JRL.txt" />
				<include name="lib/**/*" />
			</zipfileset>
		</zip>
	</target>
	
	
	
	<target name="src-installer" depends="src-zip">
		
		<tstamp />
		
		<property name="src.installer.class" value="build/XSOM_src_${DSTAMP}.class" />
		
		<!-- extract installer -->
		<unzip dest="build/installer">
			<fileset dir="lib" includes="installer.jar"/>
		</unzip>
		
		<jar destfile="build/src-installer.jar">
			<manifest>
				<attribute name="Main-class" value="com.sun.tools.xjc.installer.Main"/>
			</manifest>
			<zipfileset file="build/xsom-src.zip" fullpath="package.zip" />
			<zipfileset dir="build/installer" includes="**/*" excludes="license.txt, META-INF/MANIFEST.MF" />
			<zipfileset dir="." includes="JRL.txt" fullpath="license.txt"/>
		</jar>
		
		<!-- pack it into a class -->
		<java jar="lib/sfx4j-1.0.jar" fork="true" failonerror="true">
			<arg path ="build/src-installer.jar"/>
			<arg path ="${src.installer.class}"/>
		</java>
		
		<echo>source installer produced at ${src.installer.class}</echo>
	</target>
	
	<target name="clean">
		<delete dir="build"/>
	</target>

</project>
