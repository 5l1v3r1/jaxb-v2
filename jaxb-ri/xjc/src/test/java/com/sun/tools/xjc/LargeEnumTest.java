/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2011-2013 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */
package com.sun.tools.xjc;

import com.sun.tools.xjc.test.xmlgen.JXBBindings;
import com.sun.tools.xjc.test.xmlgen.JXBGlobalBindings;
import com.sun.tools.xjc.test.xmlgen.Utils;
import com.sun.tools.xjc.test.xmlgen.XMLDocument;
import com.sun.tools.xjc.test.xmlgen.XMLElement;
import com.sun.tools.xjc.test.xmlgen.XSDEnumeration;
import com.sun.tools.xjc.test.xmlgen.XSDRestriction;
import com.sun.tools.xjc.test.xmlgen.XSDSchema;
import com.sun.tools.xjc.test.xmlgen.XSDSimpleType;
import com.sun.tools.xjc.test.xmlgen.XMLWritter;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import static junit.framework.Assert.*;
import org.junit.Test;

/**
 * Test XJC processing of large enumeration.
 */
public class LargeEnumTest {

    /** Size of enumeration to be generated by XJC. */
    private static final int ENUM_SIZE = 5;

    // Just common XML generator sample.
    @Test
    public void testCommonXML() {
        // Target XML file.
        final File docFile = new File(System.getProperty("java.io.tmpdir"), "common.xml");
        // XML document root.
        final XMLDocument doc = new XMLDocument("1.0", "UTF-8");
        // Document structure builder.
        XMLElement level1 = doc.<XMLElement>addElement(new XMLElement("level1", new String[] {"name", "John"}));
        level1.addElement(new XMLElement("level2_1", new String[] {"age", "25"}));
        level1.<XMLElement>addElement(new XMLElement("level2_2", new String[] {"age", "45"}))
                .addElement(new XMLElement("level3", new String[] {"town", "Prague"}, new String[] {"location", "Oracle"}));

        System.out.println("Generating " + docFile.getAbsolutePath());
        // XML document writting code.
        try (XMLWritter writer = new XMLWritter(docFile, 4)) {
            doc.generate(writer);
        }
        //docFile.delete();
    }

    // Not finished. Test is too complicated to be part of the build junit tests anyway.
    // Keeping it here as XML generator sample in case someine will need it in the future.
    @Test
    public void testLargeEnum() {
        final File jxb = generateJXB();
        final File xsd = generateXSD();
        runXJC(jxb, xsd);
        buildSources();
    }

    /**
     * Build Java sources generated by XJC.
     */
    private static void buildSources() {
        final String[] srcs = new String[]{
            "test/enums/EnumType.java",
            "test/enums/ObjectFactory.java"
        };
        final String[] cmd = new String[srcs.length + 1];
        cmd[0] = Utils.getJavac();
        for (int i = 0; i < srcs.length; i++) {
            final String srcPath = srcs[i];
            File src = new File(srcPath);
            if (!src.canRead()) {
                fail("File "+srcPath+" is not readable.");
            }
            cmd[i+1] = srcPath;
        }
        try {
            final Process p = Runtime.getRuntime().exec(cmd);
            try {
                p.waitFor(60, TimeUnit.SECONDS);
            } catch (InterruptedException ex) {
                System.out.println("Build failed: Compilator execution timeout.");
                p.destroyForcibly();
            }
            int exit = p.exitValue();
            if (exit != 0) {
                System.out.println("Java build failed");
            } else {
                System.out.println("Java build passed");
            }
            final Scanner s = new Scanner(p.getInputStream()).useDelimiter("\\A");
            String output = s.hasNext() ? s.next() : "";
            System.out.print(output);
        } catch (IOException ex) {
            System.out.print("Build failed: ");
            System.out.println(ex.getMessage());
        }
    }

    /**
     * Generate Java files using XJC.
     * @param jxb JAXB configuration file.
     * @param xsd XML schema file.
     */
    @SuppressWarnings("CallToPrintStackTrace")
    private void runXJC(final File jxb, final File xsd) {
        final String[] args = new String[]{"-b", jxb.getAbsolutePath(), xsd.getAbsolutePath()};
        try (final PrintStream out = new PrintStream(System.out)) {
            Driver.run(args, out, out);
        } catch (Throwable t) {
            System.out.println("XJC execution failed");
            t.printStackTrace();
        }
    }

    /**
     * Generate XML schema file.
     * @return XML schema file.
     */
    private File generateXSD() {
        final File docFile = new File(System.getProperty("java.io.tmpdir"), "large_enum.xsd");
        final XMLDocument doc = new XMLDocument("1.0", "UTF-8");
        final XSDRestriction restriction = doc
                .<XSDSchema>addElement(new XSDSchema("http://www.w3.org/2001/XMLSchema", "test:enums"))
                .<XSDSimpleType>addElement(new XSDSimpleType("EnumType"))
                .<XSDRestriction>addElement(new XSDRestriction("xsd:normalizedString"));
        for (int i = 0; i < ENUM_SIZE; i++) {
            final StringBuilder sb = new StringBuilder(12);
            sb.append("Element_");
            sb.append(Integer.toString(i));
            restriction.addElement(new XSDEnumeration(sb.toString()));
        }
        System.out.println("Generating " + docFile.getAbsolutePath());
        try (final XMLWritter writer = new XMLWritter(docFile, 4)) {
            doc.generate(writer);
        }
        return docFile;
    }

    /**
     * Generate JAXB configuration file.
     * @return JAXB configuration file.
     */
    private File generateJXB() {
        final File docFile = new File(System.getProperty("java.io.tmpdir"), "large_enum.jxb");
        final XMLDocument doc = new XMLDocument("1.0", "UTF-8");
        doc.<JXBBindings>addElement(new JXBBindings("1.0", new String[] {"xsd", "http://www.w3.org/2001/XMLSchema"}))
                .<JXBGlobalBindings>addElement(new JXBGlobalBindings(new String[] {"typesafeEnumMaxMembers", "2700"}));
        System.out.println("Generating " + docFile.getAbsolutePath());
        try (final XMLWritter writer = new XMLWritter(docFile, 4)) {
            doc.generate(writer);
        }
        return docFile;
    }

}
